#include "stm32l1xx.h"

#include "stm32l1xx_ll_system.h"
#include "stm32l1xx_ll_bus.h"
#include "stm32l1xx_ll_gpio.h"
#include "stm32l1xx_ll_rcc.h"
#include "stm32l1xx_ll_pwr.h"
#include "stm32l1xx_ll_utils.h"
#include "stm32l1xx_ll_adc.h"

#include "stm32l1xx_ll_lcd.h"
#include "stm32l152_glass_lcd.h"
#include "stdio.h"

#define released 0
#define pressed 1

unsigned int sw,state;
char disp_str[] = "1811340015";
void SystemClock_Config(void);
uint16_t adc_data = 0;
uint8_t prog_state = 0;
uint8_t sw_cnt = 0;


int main()
{
	RCC -> CR |= (1<<0);//Hi-speed Clk en
	while((RCC->CR & 0x02)==0x02);
	RCC -> APB2ENR |= (1<<9);//adc
	RCC -> APB2ENR |= (1<<0);//sys config
	
	SYSCFG -> EXTICR[0] &= ~(15<<0);
	
	EXTI -> IMR |= (1<<0);
	EXTI -> RTSR |= (1<<0);
	
	NVIC_EnableIRQ((IRQn_Type)6);
	NVIC_SetPriority((IRQn_Type)6,0);
	
	SystemClock_Config();
	LCD_GLASS_Init();	

	RCC -> AHBENR |= (1<<0)|(1<<1)|(1<<2)|(1<<3); //enable GPIO ABCD
	
	GPIOA -> MODER &= ~(3<<0);//PA0
	GPIOA -> MODER |= (1<<22)|(1<<24)|(3<<10);//LED
	GPIOB -> MODER |= (1<<12)|(1<<14);//LED
	GPIOC -> MODER |= (1<<24);//LED
	GPIOD -> MODER |= (1<<4);//LED

//	RCC -> APB1ENR |= (1<<29);//dac
	
	
	
	ADC1->CR1 |= (1<<24)|(1<<11);
	ADC1->CR1 &= ~(7<<13);
	ADC1->CR2 &= ~(1<<11);//alignment
	ADC1->SMPR3 |= (2<<15);
	ADC1->SQR5 |= (5<<0);
	ADC1->CR2 |= (1<<0);//A/D Convert
	
	LCD_GLASS_DisplayString((uint8_t*)disp_str);
	while(1)
	{
		
//			GPIOA -> ODR |= (1<<11)|(1<<12);
//			GPIOB -> ODR |= (1<<6)|(1<<7);
//			GPIOC -> ODR |= (1<<12);
//			GPIOD -> ODR |= (1<<2);
		
		ADC1->CR2 |= (1<<30);//start regular conversion
		while((ADC1->SR & (1<<1))==0);//Regular channel end of conversion
		adc_data = ADC1->DR;
		sprintf(disp_str, "%d",adc_data);
		LCD_GLASS_Clear();
		LCD_GLASS_DisplayString((uint8_t*)disp_str);
		switch (prog_state) 
		{
			case 0:
				if(adc_data >=0 && adc_data <1)
				{
					GPIOB -> ODR &= ~((1<<7) | (1<<6));
					GPIOA -> ODR &= (0<<11)|(0<<12);
					GPIOC -> ODR &= (0<<12);
					GPIOD -> ODR &= (0<<2);
				}
				else if(adc_data >=1 && adc_data <=341)
				{
					GPIOB -> ODR |= (1<<7) | (1<<6);
					GPIOA -> ODR &= (0<<11)|(0<<12);
					GPIOC -> ODR &= (0<<12);
					GPIOD -> ODR &= (0<<2);
				}
				else if	(adc_data >=342 && adc_data <=682)
				{
					GPIOB -> ODR |= (1<<7) | (1<<6);
					GPIOA -> ODR &= (0<<11) | (0<<12);
					GPIOC -> ODR |= (1<<12);
					GPIOD -> ODR |= (1<<2);
				}
				else if	(adc_data >=683 && adc_data <=1023)
				{
					GPIOB -> ODR |= (1<<7) | (1<<6);
					GPIOA -> ODR |= (1<<11) | (1<<12);
					GPIOC -> ODR |= (1<<12);
					GPIOD -> ODR |= (1<<2);
				}
				break;
			case 1:
				GPIOB -> ODR &= ~((1<<7) | (1<<6));
				GPIOA -> ODR &= ~((1<<11) | (1<<12));
				GPIOC -> ODR &= ~(1<<12);
				GPIOD -> ODR &= ~(1<<2);
				break;
			default:
				break;
		}
	}
	
}
void SystemClock_Config(void)
{
  /* Enable ACC64 access and set FLASH latency */ 
  LL_FLASH_Enable64bitAccess();; 
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);

  /* Set Voltage scale1 as MCU will run at 32MHz */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
  
  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
  while (LL_PWR_IsActiveFlag_VOSF() != 0)
  {
  };
  
  /* Enable HSI if not already activated*/
  if (LL_RCC_HSI_IsReady() == 0)
  {
    /* HSI configuration and activation */
    LL_RCC_HSI_Enable();
    while(LL_RCC_HSI_IsReady() != 1)
    {
    };
  }
  
	
  /* Main PLL configuration and activation */
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLL_MUL_6, LL_RCC_PLL_DIV_3);

  LL_RCC_PLL_Enable();
  while(LL_RCC_PLL_IsReady() != 1)
  {
  };
  
  /* Sysclk activation on the main PLL */
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
  {
  };
  
  /* Set APB1 & APB2 prescaler*/
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);

  /* Set systick to 1ms in using frequency set to 32MHz                             */
  /* This frequency can be calculated through LL RCC macro                          */
  /* ex: __LL_RCC_CALC_PLLCLK_FREQ (HSI_VALUE, LL_RCC_PLL_MUL_6, LL_RCC_PLL_DIV_3); */
  LL_Init1msTick(32000000);
  
  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(32000000);
}
void EXTI0_IRQHandler(void)
{
	if((EXTI->PR & 0x01) == 0x01)
	{
		EXTI->PR |= (1<<0);
	}
	if((GPIOA -> IDR & 0x01) == 0x01)
		{prog_state ^= 1;}


}